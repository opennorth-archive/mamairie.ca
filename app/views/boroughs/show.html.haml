- content_for(:head){auto_discovery_link_tag :atom, format: 'atom'}
.container
  .row
    .span12
      %h2
        = @borough.name
      %ul.unstyled#council
        - @borough.people.sort_by{|x| x.mayor? ? 'A' : x.last_name}.each do |person|
          %li(class="#{'well' if person.mayor?}")
            = link_to image_tag(person.photo.large.url, size: '90x120', alt: ''), person_path(id: person.slug)
            .person
              .name
                = link_to person.name, person_path(id: person.slug)
                %abbr.label(class="#{person.party_slug}" title="#{person.party_name}")= person.party_slug.first.upcase
              .position
                = person.district_id ? person.district.name : person.positions.first
  .row.spacer
    .span8
      = render 'shared/share', url: borough_url(id: @borough.slug, format: 'atom')
      #activities
        %ul.unstyled
          - @activities.each do |activity|
            %li
              = render "shared/#{activity.source}", activity: activity
    .span4
      %aside
        = render 'shared/social', entity: @borough
        %p
          = link_to t('links.villemontrealqcca', name: @borough.name), @borough.url
        %link{:rel => "stylesheet", :type => "text/css", :href => "http://murmitoyen.com/events/js/syndication.css"}
        %h2=t '.events'
        #murmitoyen
          - components = RiCal.parse_string(open("http://murmitoyen.com/events/link/iCalendar.php?gID=234").read)
          - components[0].events.each do |event|
            - if event.location.gsub(/--/, '-').include? @borough.name
              .eventTitle
                %a{:href => "http://murmitoyen.com/events/index.php?com=detail&amp;eID=96326"}
                  %img{:src => "http://murmitoyen.com/events/images/thumbs/mini/96326.jpg", :style => "margin:5px 10px 5px 5px;  float:left;"}
                %span.eventTime 
                  = event.dtstart.strftime("%A %m %B %Y, %H")
                %br
                %a{:href => event.url}
                  = event.summary.gsub(/\\/, '')
